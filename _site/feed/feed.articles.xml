<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title> - Articles</title>
		<description></description>
		<link></link>
		
			
			<item>
				<title>Migrating to Jekyll</title>
				<description>&lt;p&gt;Welcome! I&amp;rsquo;m currently migrating this blog to &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki&quot;&gt;Jekyll&lt;/a&gt;; comments should be restored soon.&lt;/p&gt;
</description>
				<published>Sat Jun 16 00:00:00 -0700 2012</published>
				<link>/2012/06/16/migrating-to-jekyll/</link>
			</item>
			
		
			
			<item>
				<title>Measuring Urban Mobility and Accessibility Using OpenTripPlanner Analyst</title>
				<description>&lt;p&gt;&lt;a href=&quot;/a/2012-04-29-measuring-urban-mobility-and-accessibility-using-opentripplanner-analyst/urbanmobilityposter.png&quot;&gt;&lt;img src=&quot;/a/2012-04-29-measuring-urban-mobility-and-accessibility-using-opentripplanner-analyst/urbanmobilityposter.png&quot; alt=&quot;Thumbnail of the poster&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I presented a poster on &lt;a href=&quot;http://github.com/openplans/opentripplanner-analyst&quot;&gt;OpenTripPlanner Analyst&lt;/a&gt; at the &lt;a href=&quot;http://calgeog.org&quot;&gt;California Geographical Society&lt;/a&gt; 2012 conference. Here are the poster and some companion materials:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/a/cgs2012/urbanmobilityposter.pdf&quot;&gt;Poster (PDF, 1.7MB)&lt;/a&gt;&amp;mdash;-the poster itself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/a/cgs2012/urbanmobilitymapbook.pdf&quot;&gt;Maps (PDF, 7.8MB)&lt;/a&gt;&amp;mdash;-all of the maps that were present on the poster. Some were somewhat small, here is a PDF of all of them in vector format, suitable for stretching across the sides of large buildings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/a/cgs2012/urbanmobilitymethodology.pdf&quot;&gt;Methodology (PDF, 207KB)&lt;/a&gt;&amp;mdash;-the methodology behind making each of the figures. This is a more in-depth, technical explanation than was provided on the poster itself.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You may also want to visit the homepage of the &lt;a href=&quot;http://opentripplanner.com&quot;&gt;OpenTripPlanner Project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you may want to see some of the other things I&amp;rsquo;m working on by visiting &lt;a href=&quot;/&quot;&gt;my blog&lt;/a&gt;.&lt;/p&gt;
</description>
				<published>Sun Apr 29 16:50:50 -0700 2012</published>
				<link>cgs2012</link>
			</item>
			
		
			
			<item>
				<title>Elevators in OpenTripPlanner</title>
				<description>&lt;p&gt;I&amp;rsquo;ve been working on the &lt;a href=&quot;http://opentripplanner.org&quot;&gt;OpenTripPlanner&lt;/a&gt; project quite a bit lately. One thing I did a month or so ago was to implement elevator support in the routing engine. I decomposed OSM nodes tagged highway=elevator by their constituent levels, and built edges between them to represent boarding, riding on, and alighting from an elevator. I was very impressed with the friendliness and responsiveness of the community.&lt;/p&gt;

&lt;p&gt;One challenge was parsing OSM levels. They can come from multiple sources&amp;mdash;-level_map relations, level tags or layer tags. I wanted to support all of these, or any combination (on a single elevator). I originally did this by noting the source and adding 0, 1000 or 2000 to the level, but Andrew Byrd has made an OSMLevel class which handles this much more neatly. Level maps allow levels to be named, which is quite nice: &amp;ldquo;take elevator to garage&amp;rdquo; instead of &amp;ldquo;take elevator to -1.&amp;rdquo; So, for all OSM mappers out there, here is a quick guide to making routable elevators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tag your elevator nodes highway=elevator&lt;/li&gt;
&lt;li&gt;Add access restrictions: wheelchair=yes and bicycle=yes tags&lt;/li&gt;
&lt;li&gt;Use an OSM Level Map relation if there is any possibility that level names would not be clear.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;EDIT:&lt;/em&gt; To clarify, the level annotations are always on the &lt;em&gt;ways&lt;/em&gt; connecting to the elevators, not the elevator nodes themselves.&lt;/p&gt;
</description>
				<published>Sun Apr 01 21:00:53 -0700 2012</published>
				<link>/2012/04/01/elevators-in-opentripplanner/</link>
			</item>
			
		
			
			<item>
				<title>BART Shocker: First Inner-Core Infill Station Since Embarcadero</title>
				<description>&lt;p&gt;BART shocked Bay Area transit enthusiasts this morning with an announcement that it plans to build a new infill station, to serve all San Francisco lines, at Treasure Island.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Treasure Island has long been underserved by transit,&amp;rdquo; said a BART employee, who is heading the project and acting as a liaison between the agencies involved. &amp;ldquo;The residents have long been frustrated that they live within a mile of rail rapid transit but cannot access it.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The announcement has met with mixed results. While most residents of Treasure Island are ecstatic, East Bay commuters are not so pleased. One person, who lives in Castro Valley but commutes via BART daily to his job as a web designer in San Francisco&amp;rsquo;s Mission, complained that it will slow service. &amp;ldquo;BART travels at up to 80 mph in the Transbay Tube, crossing the Bay in just a few minutes. By adding a stop in the middle of that, you not only add the 20-30 seconds of time at the stop, but also the time it takes to accelerate and decelerate to that stop.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Cyclists, however, are happy about the project. The new eastern span of the Bay Bridge will sport a bike path, but the western span, not scheduled for replacement, does not. By allowing a quick connection between the Yerba Buena Island and San Francisco, a cyclist can ride to Yerba Buena, then catch BART for a quick ride into the city. Responding to the head of the Greater Golden Gate, Gough and Geary Boulevard Cyclists' Association, a BART employee confirmed that the cycle link is a critical part of the project, and that the station will have new electronic bike lockers, as well as easy bicycle access from the bridge.&lt;/p&gt;

&lt;p&gt;For anyone who hasn&amp;rsquo;t caught it yet, note &lt;a href=&quot;http://en.wikipedia.org/wiki/April_Fools%27_Day&quot;&gt;date of issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And if you still haven&amp;rsquo;t caught it, read &lt;a href=&quot;http://en.wikipedia.org/wiki/April_Fools%27_Day&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy April Fools' Day!&lt;/p&gt;
</description>
				<published>Sun Apr 01 05:15:09 -0700 2012</published>
				<link>/2012/04/01/bart-shocker-first-inner-core-infill-station-since-embarcadero/</link>
			</item>
			
		
			
			<item>
				<title>Conditionals in the QGIS raster calculator</title>
				<description>&lt;p&gt;I needed to do some conditionals in the QGIS raster calculator, but it doesn&amp;rsquo;t support that&amp;mdash;-or at least doesn&amp;rsquo;t seem to. But it does support logical operators, with a result of either 0 or 1. For instance, here&amp;rsquo;s the script I wrote:&lt;/p&gt;

&lt;pre&gt;
# Subtract them
((DavisQuad2012-02-25T16_00_00Z@1  -  DavisQuad2012-02-29T16_00_00Z@1)*
# Multiply by 1 if neither is 255 (NoData), 0 otherwise
(DavisQuad2012-02-25T16_00_00Z@1 != 255 AND DavisQuad2012-02-29T16_00_00Z@1 != 255))
# Subtract 32768 if either one was NoData, giving us -32768 for NoData.
-
(32768*(DavisQuad2012-02-25T16_00_00Z@1 = 255 OR DavisQuad2012-02-29T16_00_00Z@1 = 255))
&lt;/pre&gt;


&lt;p&gt;Of course, you can&amp;rsquo;t actually put the comments in. But what it does is this: First, I subtract one raster from the other and multiply that by the logical operation that neither one contains NoData. That gives me the difference of the rasters, or 0 if either one contains NoData. Then I subtract 32768 multiplied by the inverse of the aforementioned logical operation, so any pixel with a NoData value in either of the original rasters is -32768 in the new one.&lt;/p&gt;

&lt;p&gt;Note: I expanded on an idea from the GDAL &lt;a href=&quot;http://trac.osgeo.org/gdal/browser/trunk/gdal/swig/python/scripts/gdal_calc.py&quot;&gt;gdal_calc.py&lt;/a&gt; script.&lt;/p&gt;
</description>
				<published>Sat Mar 31 21:28:35 -0700 2012</published>
				<link>/2012/03/31/conditionals-in-the-qgis-raster-calculator/</link>
			</item>
			
		
			
			<item>
				<title>Conditional Labels in QGIS</title>
				<description>&lt;p&gt;I fairly commonly find myself in a situation where I would like to display one label for certain features and another for other features in the same layer. QGIS doesn&amp;rsquo;t have an official way to split labels up into categories, and until now I&amp;rsquo;d resorted to having two layers to render otherwise identical features. But, in the new, excellent &lt;a href=&quot;http://woostuff.wordpress.com/2011/10/27/expression-based-labeling/&quot;&gt;expression based labeling&lt;/a&gt; from Nathan Woodrow, I realized one can use an SQL CASE statement. For instance, one time I need to use two types labels is when labeling roads in OpenStreetMap: I want to use the name tag, &lt;em&gt;unless&lt;/em&gt; the feature has a ref tag defined (a name tag might be &amp;lsquo;Capital City Freeway&amp;rsquo;, while the ref tag would be &amp;lsquo;US 50&amp;rsquo;). Here&amp;rsquo;s how I solved that particular problem:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CASE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;For now, anyhow, you&amp;rsquo;ll need to be running the dev build of QGIS. Happy GISing!&lt;/p&gt;
</description>
				<published>Sat Mar 03 21:53:31 -0800 2012</published>
				<link>/2012/03/03/conditional-labels-in-qgis/</link>
			</item>
			
		
			
			<item>
				<title>More Basemaps in QGIS</title>
				<description>&lt;p&gt;One of the more popular posts on this blog has been my piece on &lt;a href=&quot;/2011/04/06/basemaps-in-qgis/&quot;&gt;adding basemaps to QGIS&lt;/a&gt;. While the OpenLayer plugin is great, one of the things that I find dissatisfying is that it requires reprojecting your data to match the EPSG:3857 basemap. I often work in State Plane, and I&amp;rsquo;d just as soon have my data stay in that projection, which will also minimize local distortion. Well, as it turns out, one can add tiled map services as GDAL raster layers, with all the benefits that entails (e.g. reprojection). What you need to do is create an XML file like the following (which is lifted almost verbatim from &lt;a href=&quot;http://www.gdal.org/frmt_wms.html&quot;&gt;the GDAL website&lt;/a&gt;, specifically &lt;a href=&quot;http://www.gdal.org/frmt_wms_openstreetmap_tms.xml&quot;&gt;this file&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;GDAL_WMS&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Service&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TMS&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- note: if you use this file verbatim, you *must* credit MapQuest and OpenStreetMap! --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ServerUrl&amp;gt;&lt;/span&gt;http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ServerUrl&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Service&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;DataWindow&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;UpperLeftX&amp;gt;&lt;/span&gt;-20037508.34&lt;span class=&quot;nt&quot;&gt;&amp;lt;/UpperLeftX&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;UpperLeftY&amp;gt;&lt;/span&gt;20037508.34&lt;span class=&quot;nt&quot;&gt;&amp;lt;/UpperLeftY&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;LowerRightX&amp;gt;&lt;/span&gt;20037508.34&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LowerRightX&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;LowerRightY&amp;gt;&lt;/span&gt;-20037508.34&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LowerRightY&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TileLevel&amp;gt;&lt;/span&gt;18&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TileLevel&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TileCountX&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TileCountX&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TileCountY&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/TileCountY&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;YOrigin&amp;gt;&lt;/span&gt;top&lt;span class=&quot;nt&quot;&gt;&amp;lt;/YOrigin&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/DataWindow&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Projection&amp;gt;&lt;/span&gt;EPSG:3857&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Projection&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;BlockSizeX&amp;gt;&lt;/span&gt;256&lt;span class=&quot;nt&quot;&gt;&amp;lt;/BlockSizeX&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;BlockSizeY&amp;gt;&lt;/span&gt;256&lt;span class=&quot;nt&quot;&gt;&amp;lt;/BlockSizeY&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;BandsCount&amp;gt;&lt;/span&gt;3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/BandsCount&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Cache/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/GDAL_WMS&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Change the ServerUrl to your Tiled Map Service server (this one is for MapQuest Open Tiles), then go into QGIS, Layer-&amp;gt;Add Raster Layer and select the XML file.&lt;/p&gt;

&lt;p&gt;A few caveats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The OpenLayers plugin automatically adds the required attributions, at least for OSM. This can be nice or not—nice in that you don&amp;rsquo;t have to remember to add the attribution, not so nice in that you can&amp;rsquo;t choose where to place the attribution; it&amp;rsquo;s always in the lower-right.&lt;/li&gt;
&lt;li&gt;Reprojecting layers with text may yield strange skewing and distortion.&lt;/li&gt;
&lt;li&gt;You need to be sure that you use these services legally (as you did with OpenLayers plugin).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Have fun!&lt;/p&gt;

&lt;p&gt;You can also convert tiles to GeoTIFF using gdal_translate, but I suspect most TMS providers would prefer you didn&amp;rsquo;t.&lt;/p&gt;
</description>
				<published>Thu Feb 02 17:55:11 -0800 2012</published>
				<link>/2012/02/02/more-basemaps-in-qgis/</link>
			</item>
			
		
			
			<item>
				<title>Transit to Everywhere</title>
				<description>&lt;p&gt;&lt;a href=&quot;/a/2011-12-30-transit-to-everywhere/toeverywheresftransit10.png&quot;&gt;&lt;img src=&quot;/a/2011-12-30-transit-to-everywhere/toeverywheresftransit10.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;em&gt;Data courtesy MapQuest and OpenStreetMap CC-BY-SA, the City and County of San Francisco, and Bay Area Rapid Transit&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is an overlay of the transit and walking trip plans generated by OpenTripPlanner from Powell and Market to every other intersection in San Francisco, after &lt;a href=&quot;http://www.flickr.com/photos/walkingsf/6536396399/&quot;&gt;Eric Fischer&amp;rsquo;s map of walking routes&lt;/a&gt; to every intersection in San Francisco. It brings out the transit routes but also shows well-used walking routes. The lines do not vary in width (don&amp;rsquo;t let Market Street fool you, it&amp;rsquo;s actually several lines&amp;emdash;BART, MUNI rail in 2 directions, Muni bus, walking&amp;emdash;very near each other). The lines fade where there are fewer routes using them, because they are rendered as black set at 10% opacity. Where there are more lines overlapping, the lines become darker, in what I believe is a log (or log-like) scale. It ended up just mostly being a map of San Francisco, with transit routes emphasized. It doesn&amp;rsquo;t show potential utilization of the transit system, because the routes are not weighted (it would probably be wise to weight the routes by the density of the block they terminate in and by their service area; i.e., estimate the number of people within the Thiessen polygon of each intersection and weight the route by that). Also, I had difficulty finding an opacity level where the usage of transit routes fades towards the end (as it clearly should) but still shows the streets that walked down by just one or two trip plans.&lt;/p&gt;

&lt;p&gt;I think the data I used to make this map could possibly be better utilized to make a cartogram of San Francisco transit times (&lt;a href=&quot;http://www.flickr.com/photos/walkingsf/6350997842/in/photostream&quot;&gt;like another of Eric Fischer&amp;rsquo;s maps&lt;/a&gt;, but including transfers and walking times).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d also like to make a companion map using the OTP bike router. I think it could look really interesting in San Francisco, because the router will try to avoid hills.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Methodology&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I set up an instance of &lt;a href=&quot;http://opentripplanner.org&quot;&gt;OpenTripPlanner&lt;/a&gt; using a graph built from &lt;a href=&quot;http://openstreetmap.org&quot;&gt;OpenStreetMap&lt;/a&gt; data for the San Francisco area, as well as GTFS data from &lt;a href=&quot;http://bart.gov&quot;&gt;BART&lt;/a&gt; and &lt;a href=&quot;http://sfmta.com&quot;&gt;San Francisco Muni&lt;/a&gt;. I used the pre-built binaries of OTP. I then used a Python script to request directions from Market and Powell to every other intersection in San Francisco, as defined in the StIntersections dataset from &lt;a href=&quot;http://gispub02.sfgov.org/website/sfshare/index2.asp&quot;&gt;here&lt;/a&gt;. I stored the directions in a PostGIS database. I used one machine as the OTP server, and ran the script and PostGIS on another machine, but I see no reason why they couldn&amp;rsquo;t be on the same machine. I used QGIS to render the map. For what it&amp;rsquo;s worth, I&amp;rsquo;ve &lt;a href=&quot;https://gist.github.com/1542816&quot;&gt;open-sourced the script I wrote&lt;/a&gt;. It may provide a good example of how to use the OTP JSON API in Python.&lt;/p&gt;
</description>
				<published>Fri Dec 30 20:03:46 -0800 2011</published>
				<link>/2011/12/30/transit-to-everywhere/</link>
			</item>
			
		
			
			<item>
				<title>GitHub Image Diffs</title>
				<description>&lt;p&gt;As you may have gathered, I like &lt;a href=&quot;http://git-scm.com&quot;&gt;Git&lt;/a&gt; and &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;. Today, I ran across a GitHub feature that is really cool and above and beyond the call of duty: not only do they produce and display diffs on text files, but also on image files! You can see &lt;a href=&quot;https://github.com/transit-appliance/Transit-Board-Hotel/commit/4209e30fde29c1557ef59be7df7d6686247e35df?diff-0=1-21&quot;&gt;an example in one of my repositories&lt;/a&gt;. Added points if you can figure out where the map tile is from!&lt;/p&gt;
</description>
				<published>Fri Dec 23 17:14:00 -0800 2011</published>
				<link>/2011/12/23/as-you-may-have/</link>
			</item>
			
		
			
			<item>
				<title>Shapefiles in OpenLayers</title>
				<description>&lt;p&gt;Update 2011-12-14: It seems that a lot of people are coming here from web searches with phrases like &amp;ldquo;shapefile openlayers.&amp;rdquo; If all you want to do is display your data in OpenLayers, I&amp;rsquo;d highly recommend using a program like &lt;a href=&quot;http://qgis.org&quot;&gt;Quantum GIS&lt;/a&gt; to convert your Shapefile to a more web-friendly format like KML or GeoJSON. Both of these formats can be read by OpenLayers directly, and you&amp;rsquo;ll see faster performance and more browser compatibility than if you were to load your Shapefiles directly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/a/2011-12-13-shapefiles-in-openlayers/screenshot-at-2011-12-13-214616.png&quot;&gt;&lt;img src=&quot;/a/2011-12-13-shapefiles-in-openlayers/screenshot-at-2011-12-13-214616.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over the last few days, I&amp;rsquo;ve been using Tom Carden&amp;rsquo;s &lt;a href=&quot;https://github.com/RandomEtc/shapefile-js&quot;&gt;shapefile-js&lt;/a&gt; library that reads ESRI Shapefiles in JavaScript, which I found via &lt;a href=&quot;http://www.prodevelop.es/es/blog/11/12/11/rendering-local-shapefiles-html5&quot;&gt;a post on the Prodevelop blog&lt;/a&gt;. The library is quite incredible, but his samples use a simple canvas for display. I thought it would be really cool if this could be integrated with &lt;a href=&quot;http://openlayers.org&quot;&gt;OpenLayers&lt;/a&gt;, so I created a bit of JavaScript to do so. You can give it a test drive &lt;a href=&quot;http://mattwigway.github.com/shapefile-js/ol_simple.html&quot;&gt;here&lt;/a&gt;, and look at the code &lt;a href=&quot;https://github.com/mattwigway/shapefile-js/tree/openlayers&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, the library does all the heavy lifting. &lt;a href=&quot;https://github.com/mattwigway/shapefile-js/blob/openlayers/src/ol_shapefile.js#L16&quot;&gt;My code&lt;/a&gt; converts the shapefile shapes to WKT, which is passed to OpenLayers. Ultimately, I&amp;rsquo;d like to see an OpenLayers plugin so that you can use Shapefiles directly (i.e., an OpenLayers.Format.Shapefile). The main issue I see is that there needs to be a new strategy as well as a new format, because a) Shapefiles are made up of multiple pieces and b) we need to use the BinaryAjax loader since Shapefiles are binary.&lt;/p&gt;

&lt;p&gt;My code seems to work well with points, lines and polygons, including the donut polygon case (to see for yourself, look at South Africa). (I did not test the donut polygon case, but I think it should work). More eyes are of course welcome! Also, the shapefile-js library can only handle pretty small Shapefiles. If I integrate this into OpenLayers, I think, long term, using a Web Worker thread to parse the Shapefile would be wise (which is another challenge to direct OpenLayers integration).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT 2011-12-13 22:36 -0800:&lt;/strong&gt; I tested the donut polygon case.&lt;/p&gt;
</description>
				<published>Tue Dec 13 21:59:47 -0800 2011</published>
				<link>/2011/12/13/shapefiles-in-openlayers/</link>
			</item>
			
		
			
			<item>
				<title>Another LA Metro Visualization</title>
				<description>&lt;p&gt;&lt;a href=&quot;/a/2011-11-12-another-la-metro-visualization/metro2011-11-10_manual.png&quot;&gt;&lt;img src=&quot;/a/2011-11-12-another-la-metro-visualization/metro2011-11-10_manual.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
Here&amp;rsquo;s another visualization of the data used in &lt;a href=&quot;/2011/11/12/making-transit-travel-speed-maps-with-open-source-gis/&quot;&gt;the previous post&lt;/a&gt;; I made the lines a lot finer, so the noise is less visible. It&amp;rsquo;s easier than ever to see the Silver Line. I classed the data manually this time.&lt;/p&gt;
</description>
				<published>Sat Nov 12 18:06:04 -0800 2011</published>
				<link>/2011/11/12/another-la-metro-visualization/</link>
			</item>
			
		
			
			<item>
				<title>Making Transit Travel Speed Maps with Open Source GIS</title>
				<description>&lt;p&gt;Update 2011-11-12 8:21 -0800: I just posted a &lt;a href=&quot;/2011/11/12/another-la-metro-visualization/&quot;&gt;visualization I like better&lt;/a&gt;.
&lt;a href=&quot;/a/2011-11-12-making-transit-travel-speed-maps-with-open-source-gis/metro2011-11-102.png&quot;&gt;&lt;img src=&quot;/a/2011-11-12-making-transit-travel-speed-maps-with-open-source-gis/metro2011-11-102.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Internet has been abuzz the past week regarding transit speed maps. It seems to have been spurred by &lt;a href=&quot;http://bostonography.com/2011/an-mbta-bus-iness-day/&quot;&gt;a post on Bostongraphy&lt;/a&gt;, which was inspired by many of the &lt;a href=&quot;http://www.flickr.com/search/?w=24431382@N03&amp;amp;q=nextbus&quot;&gt;amazing visualizations produced by Eric Fischer&lt;/a&gt;, especially &lt;a href=&quot;http://www.flickr.com/photos/walkingsf/4521616274/&quot;&gt;this one&lt;/a&gt;. Indeed, this blog has gotten a fair bit of traffic itself, because Andy Woodruff of Bostonography used my &lt;a href=&quot;/2011/05/29/archiving-historical-data-from-nextbus/&quot;&gt;avl2postgis&lt;/a&gt; project to retrieve the data.&lt;/p&gt;

&lt;p&gt;Most people who have created these maps have used home-made solutions for the cartography, but I thought you should be able to do this with just stock SQL and QGIS. Using QGIS for the cartography allows you to bring in lots of useful tools, things like classification and ColorBrewer ramps.&lt;/p&gt;

&lt;p&gt;The main trick is converting the point data that is retrieved from NextBus into line data for mapping (more about the cartographic considerations of line and point data below, for now I&amp;rsquo;ll focus on the technical aspects). After much whaling and gnashing of teeth, I figured out the spatial SQL to do this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST_MakeLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_geom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_geom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26945&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the_geom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST_Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST_MakeLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_geom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_geom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26945&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EPOCH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EPOCH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23693629&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starttime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endtime&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lametrolines&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROW_NUMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OVER&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextbus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROW_NUMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OVER&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextbus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_b&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lametrolines&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLUMN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traversal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lametrolines&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traversal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXTRACT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EPOCH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starttime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;(if you&amp;rsquo;re not using a timestamp column for the time column in your table (older versions of avl2postgis recommended varchar(19), you&amp;rsquo;ll want to run &lt;a href=&quot;https://gist.github.com/1360850&quot;&gt;this script&lt;/a&gt; to convert them to timestamp columns).&lt;/p&gt;

&lt;p&gt;The trick here is the window function ROW_NUMBER, which allows us to relate each row to the next row from that same vehicle. You&amp;rsquo;ll want to change the spatial reference from EPSG:26945 (State Plane California Zone 5) to something that is appropriate to your region. If it uses a unit other than meters, you&amp;rsquo;ll want to also change the conversion factor (2.2 for m/s to mph).&lt;/p&gt;

&lt;p&gt;I added the traversal column afterwards; you could also do it in the original query. I used the traversal column (which is the time between position reports) to filter out segments in QGIS that took more than 3 minutes, so that coarse data is removed. I also filtered out segments with mph &amp;gt; 80, since they are probably caused by GPS noise.&lt;/p&gt;

&lt;p&gt;I created a view that sorted by traversal descending&amp;emdash;I believe that causes the segments with the most frequent reporting to display on top. I messed with the symbology a lot to get the maximum amount of data to display; I ended up with 20 equal-interval stops between 0 and 80 mph, and a red-yellow-blue color ramp (admittedly lifted from the Bostonography post), with saturated red at 0 mph, bright yellow around 40 mph and blue at 80 mph. Most of the map is yellow-orange since it falls between 0 and 40 mph, and the degree of redness or yellowness indicates how slow or fast it is.&lt;/p&gt;

&lt;p&gt;Comments or questions about how I did it or what the results were are more than welcome, either using the comments (preferably) or the contact link above.&lt;/p&gt;

&lt;p&gt;I then symbolized based on the mph attribute. There are all kinds of things you can do with the symbology in QGIS—vary the ramps, the classification, and many other things. Also, since it&amp;rsquo;s just an SQL database, it would be trivial to make maps that showed, for instance, just Metro Rapid routes, &amp;amp;c.&lt;/p&gt;

&lt;p&gt;The coolest thing about this map is how you can see the Orange Line (up north) and the Silver Line (extending east and south from downtown) as thick blue lines (hidden a bit by some of the other lines)&amp;emdash;kudos to LA Metro for speeding bus service on these lines! I suspect the rail lines would show the same thing, but this map only shows bus service.&lt;/p&gt;

&lt;p&gt;There are a few limitations that one should be aware of when using this map. One is that there are basically two classes of service for most agencies: slower, local-stop service, and fast express service (like the Silver and Orange line in this image); there isn&amp;rsquo;t much in between (there is Metro Rapid in LA, which somewhat bridges this gap). This means that most of any classification range won&amp;rsquo;t be used. I can&amp;rsquo;t wait to hear about innovative ways to solve this, but in the meantime the map still shows some neat things, and is also really pretty. In any case, I fiddled with the symbology a lot but wasn&amp;rsquo;t really happy with the results. I think a manually defined color ramp might be the way to go eventually, with detail around 10-25mph and less detail elsewhere. I didn&amp;rsquo;t want to change too much because I think one of the strongest things about this map is the amount of service above 40mph on the busways.&lt;/p&gt;

&lt;p&gt;Another issue is drawing order. There are over 300,000 line segments in this map, so some of them draw on top of each other. Deciding which are more important is difficult; I displayed the shortest time segments on top so that the best detail would be emphasized.&lt;/p&gt;

&lt;p&gt;A single line segment is drawn from each reported position to the next one. Positions are reported usually every 1-2 minutes, so if a bus is at a traffic light for a minute, that minute is 0 mph, while the next one might be cruising at 20 mph. A better way would be to have the speed averaged over several consecutive reports, if you were looking at specific lines, rather than chokepoints (to find chokepoints, you want the fine-grained data).&lt;/p&gt;

&lt;p&gt;This map only shows buses, since LA doesn&amp;rsquo;t (yet) have real-time positions available for trains.&lt;/p&gt;

&lt;p&gt;Also, there seems to be a lot of green and blue around downtown LA, which seems improbable and is likely due to GPS interference. In fact, there are tinges of green on many local streets, which suggests that there are some flaws in the data.&lt;/p&gt;
</description>
				<published>Sat Nov 12 17:38:52 -0800 2011</published>
				<link>/2011/11/12/making-transit-travel-speed-maps-with-open-source-gis/</link>
			</item>
			
		
			
			<item>
				<title>Google Maps Tile Scales</title>
				<description>&lt;p&gt;I found this buried deep in an appendix of the &lt;a href=&quot;http://media.mapnik.org/docs/MapnikXMLDescription.pdf&quot;&gt;Mapnik XML Schema Reference&lt;/a&gt;, and I thought it so useful I am reposting it here:&lt;/p&gt;

&lt;p&gt;Zoom level Scale denominator&lt;/p&gt;

&lt;p&gt;0&lt;/p&gt;

&lt;p&gt;559,082,264&lt;/p&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;p&gt;279,541,132&lt;/p&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;p&gt;139,770,566&lt;/p&gt;

&lt;p&gt;3&lt;/p&gt;

&lt;p&gt;69,885,283&lt;/p&gt;

&lt;p&gt;4&lt;/p&gt;

&lt;p&gt;34,942,642&lt;/p&gt;

&lt;p&gt;5&lt;/p&gt;

&lt;p&gt;17,471,321&lt;/p&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;p&gt;8,735,660&lt;/p&gt;

&lt;p&gt;7&lt;/p&gt;

&lt;p&gt;4,367,830&lt;/p&gt;

&lt;p&gt;8&lt;/p&gt;

&lt;p&gt;2,183,915&lt;/p&gt;

&lt;p&gt;9&lt;/p&gt;

&lt;p&gt;1,091,958&lt;/p&gt;

&lt;p&gt;10&lt;/p&gt;

&lt;p&gt;545,979&lt;/p&gt;

&lt;p&gt;11&lt;/p&gt;

&lt;p&gt;272,989&lt;/p&gt;

&lt;p&gt;12&lt;/p&gt;

&lt;p&gt;136,495&lt;/p&gt;

&lt;p&gt;13&lt;/p&gt;

&lt;p&gt;68,247&lt;/p&gt;

&lt;p&gt;14&lt;/p&gt;

&lt;p&gt;34,124&lt;/p&gt;

&lt;p&gt;15&lt;/p&gt;

&lt;p&gt;17,062&lt;/p&gt;

&lt;p&gt;16&lt;/p&gt;

&lt;p&gt;8,531&lt;/p&gt;

&lt;p&gt;17&lt;/p&gt;

&lt;p&gt;4,265&lt;/p&gt;

&lt;p&gt;18&lt;/p&gt;

&lt;p&gt;2,133&lt;/p&gt;

&lt;p&gt;19&lt;/p&gt;

&lt;p&gt;1,066&lt;/p&gt;

&lt;p&gt;20&lt;/p&gt;

&lt;p&gt;533&lt;/p&gt;

&lt;p&gt;These are used not only by Google Maps, but also by Bing Maps, OSM, CloudMade and many others, and in fact just about any Google Mercator tile source.&lt;/p&gt;
</description>
				<published>Sat Oct 29 09:41:04 -0700 2011</published>
				<link>/2011/10/29/google-maps-tile-scales/</link>
			</item>
			
		
			
			<item>
				<title>Mapping Real-Time Delays: Review</title>
				<description>&lt;p&gt;Some readers may have noticed that I&amp;rsquo;ve updated &lt;a href=&quot;/2011/09/05/mapping-real-time-delays/&quot;&gt;my last post&lt;/a&gt; several times in the last few days. After thinking about the algorithms I used, I realized there were some significant issues with them. I&amp;rsquo;ve explained them a certain amount in my updates to my previous post, but I&amp;rsquo;d like to expand on the issues a bit here.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/a/2011-09-08-mapping-real-time-delays-review/stopspacing.png&quot;&gt;&lt;img src=&quot;/a/2011-09-08-mapping-real-time-delays-review/stopspacing.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Using an Inverse Distance Weighting algorithm exaggerates delays where stops are sparse by allowing them to spread over larger areas; the graphic should make this clear; if the red dots are stops with delays, one in the city center and one in a suburb, it is clear that the delays will be magnified where stops are sparse (figure 1), because there are less stops around it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using an IDW layer also causes areas where there is no transit service to show data based on the nearest stops.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data from TriMet (and, it seems, perhaps other GTFS-realtime producers as well) contains data for only one or two stops on a given trip, so delays only show near where the vehicle currently is. For instance, if a delayed bus is downtown right now, chances are it will remain delayed all the way to the end of its route. This causes the red &amp;lsquo;delayed&amp;rsquo; spots to follow delayed buses, rather than showing all the areas where there are delays, or showing the origins of delays. This is especially true in the outer suburbs, where the average delay for a stop is often based on just one or two transit vehicles.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
				<published>Thu Sep 08 22:58:28 -0700 2011</published>
				<link>/2011/09/08/mapping-real-time-delays-review/</link>
			</item>
			
		
			
			<item>
				<title>Mapping Real-Time Delays</title>
				<description>&lt;p&gt;&lt;strong&gt;Update 9/8/2011: I&amp;rsquo;ve posted &lt;a href=&quot;/2011/09/08/mapping-real-time-delays-review/&quot;&gt;a short piece about the significant biases and issues with this visualization&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/a/2011-09-05-mapping-real-time-delays/idwdelay.png&quot;&gt;&lt;img src=&quot;/a/2011-09-05-mapping-real-time-delays/idwdelay.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TriMet delays on the evening of 9/5/2011. They cleared up the large delay east of Portland not long after I took this screenshot.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GTFS-realtime was released a few weeks ago, and I thought the time was right to create a visualization of the data. This project is an OpenLayers web map (pictured at left, click for larger version) using &lt;a href=&quot;http://openstreetmap.org&quot;&gt;OpenStreetMap&lt;/a&gt; data (and the &lt;a href=&quot;http://developer.mapquest.com/web/products/open/map&quot;&gt;MapQuest-OSM Tiles&lt;/a&gt;), which is overlayed with a raster showing areas that are currently being affected by delays. The raster is calculated based on the average delay for every stop in TriMet&amp;rsquo;s GTFSr feed at the time, and is rendered using &lt;a href=&quot;http://en.wikipedia.org/wiki/Inverse_Distance_Weighting&quot;&gt;Inverse Distance Weighting&lt;/a&gt; to calculate the approximate delay for every location based on the delays of the nearest stops. The IDW layer is rendered on the client side using fmark&amp;rsquo;s &lt;a href=&quot;https://github.com/fmark/openlayers-pointvis&quot;&gt;openlayers-pointvis&lt;/a&gt; plugin. The data is refreshed every 30 seconds from a Postgres database, which is kept in sync with TriMet&amp;rsquo;s servers using my aforementioned &lt;a href=&quot;https://github.com/mattwigway/gtfsrdb&quot;&gt;GTFSrDB&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;The raster shows green for no delays, red for delays up to 10 minutes (delays longer than 10 minutes are truncated to 10 minutes, otherwise the map looks flat in all but the worst-of-the-worst situations where vehicles are delayed 20 minutes or more. Of course, the map could be a lot more meaningful with a larger scale). Vehicles arriving up to 10 minutes early are shown in shades of blue. Delays tend to be more evident away from downtown, because they spread to cover a larger area because the stops are not as dense outside of downtown.&lt;/p&gt;

&lt;p&gt;Using an IDW layer brings some perils in that data is shown for areas where there is no transit service (based on delays at the nearest bus stops) and that delays appear larger where stops are sparser (because there are fewer neighbors influencing a given cell), but it creates a nice, simple, easy to understand map. I also clamped the range for arrivals to +/&amp;ndash; 10 minutes of schedule, because otherwise the map looks flat (i.e. all green) in all but the most extreme of circumstances. The tradeoff here is not being able to differentiate a 10 minute delay from a 30 minute delay, and also having a 1 minute delay begin to show red tinges, even though the vehicle is well within the margin of error for arrivals.&lt;/p&gt;

&lt;p&gt;Another issue that I see with the data specifically is that it seems to tend not to provide updates for every stop, or even every timepoint, on a given trip. If an outbound trip is delayed 15 minutes downtown, it probably isn’t going to make up all of that time by the time it reaches the end of the line.&lt;/p&gt;

&lt;p&gt;I plan to investigate these issues and try to come up with a more accurate representation for this data as soon as possible. For now, this map should be viewed as more of a &amp;lsquo;proof of concept&amp;rsquo; than anything else.&lt;/p&gt;

&lt;p&gt;Unfortunately, I only have a screenshot to show, because I don&amp;rsquo;t have access to a server where I can host this. But the code is all in the demo/ folder of the &lt;a href=&quot;https://github.com/mattwigway/gtfsrdb&quot;&gt;GTFSrDB GitHub&lt;/a&gt;, and I&amp;rsquo;d be happy to assist if anyone wants to deploy this on their server (for TriMet or any other agency, although I don&amp;rsquo;t think BART would look so great thanks to the sparse stop spacing). There&amp;rsquo;s an HTML file and a JavaScript file for the UI, and a Python CGI script to fetch the data from the database. The database URL is hardcoded into the CGI script; it&amp;rsquo;s currently set up for Postgres. You&amp;rsquo;ll need to load the static GTFS data using &lt;a href=&quot;http://code.google.com/p/gtfsdb&quot;&gt;GTFSDB&lt;/a&gt; to the database as well, to provide the location data for bus stops.&lt;/p&gt;
</description>
				<published>Mon Sep 05 21:39:09 -0700 2011</published>
				<link>/2011/09/05/mapping-real-time-delays/</link>
			</item>
			
		
			
			<item>
				<title>GTFSrDB: Plumbing for GTFS-realtime</title>
				<description>&lt;p&gt;Over the last week I&amp;rsquo;ve started a new project, GTFSrDB, which allows you to connect &lt;a href=&quot;http://code.google.com/transit/realtime/&quot;&gt;GTFS-realtime&lt;/a&gt; with an SQL database, allowing app developers to use realtime data through SQL, just as easily as they use static data. Rather than worry about plumbing to connect GTFS and GTFS-realtime, they can focus on writing apps.&lt;/p&gt;

&lt;p&gt;It accomplishes two primary tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Keeping a database up-to-date with the latest realtime data, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Archiving historic real-time data.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;It&amp;rsquo;s designed to work with &lt;a href=&quot;http://code.google.com/p/gtfsdb/&quot;&gt;GTFSdb&lt;/a&gt;; it will coexist with static GTFS data in a database, so you can easily relate them. Keep in mind that if you update the GTFS data, you&amp;rsquo;ll lose archived GTFSr data.&lt;/p&gt;

&lt;p&gt;Here is an example query to find what stops have the largest delays (in seconds, for the TriMet system in Portland, OR):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_lon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_delays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;avg&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_delays&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_delays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_id&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The stop_delays view looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_time_updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrival_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;avg&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_time_updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trip_updates&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trip_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trip_updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trip_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_time_updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_sequence&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_time_updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trip_update_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trip_updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_id&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_time_updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrival_delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;(I had to pull in the trip_updates table for TriMet because they don&amp;rsquo;t have a stop_id in their stop_time_updates; they instead specify trip_id and stop_sequence.)&lt;/p&gt;

&lt;p&gt;(I&amp;rsquo;ve removed the lat and lon columns from the following table for readability)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt; stop_id |            stop_name            |         avg
---------+---------------------------------+----------------------
 10853   | Parkrose/ Sumner Transit Center | 473.8260869565217391
 7999    | NE 82nd &amp;amp; MAX Overpass          | 350.3050847457627119
 9610    | Willow Creek Transit Center     | 310.2352941176470588
 5846    | Tigard Transit Center           | 260.2093023255813953
 12849   | 16200 Block SW Langer           | 244.6111111111111111
. . .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The code is available &lt;a href=&quot;https://github.com/mattwigway/gtfsrdb&quot;&gt;on GitHub&lt;/a&gt;. Address any questions to the email on that page or to the contact link, above.&lt;/p&gt;
</description>
				<published>Fri Sep 02 20:26:41 -0700 2011</published>
				<link>/2011/09/02/gtfsrdb-plumbing-for-gtfs-realtime/</link>
			</item>
			
		
			
			<item>
				<title>Fixed-position dialogs in jQuery UI</title>
				<description>&lt;p&gt;I&amp;rsquo;m working on a project where there is a long, scrolling page and I wanted to have a dialog that is draggable and resizeable that does not scroll away when the user scrolls down. As far as I could tell, there is no option to do this with jQuery UI&amp;rsquo;s &lt;a href=&quot;http://jqueryui.com/demos/dialog/&quot;&gt;dialog&lt;/a&gt; widget. But there is a quick workaround:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;dialogDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;fixed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;I use the parent because the dialog widget wraps the content in another &amp;lt;div&amp;gt; that contains the content and the other elements of the dialog box (title bar, &amp;amp;c.).&lt;/p&gt;

&lt;p&gt;UPDATE 6 Aug. 2011:&lt;/p&gt;

&lt;p&gt;If the dialog box is resizeable, you also need to reset the position each time it is resized:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;mapDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dialogresize&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dialogDiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;fixed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



</description>
				<published>Sat Aug 06 14:06:02 -0700 2011</published>
				<link>/2011/08/06/fixed-position-dialogs-in-jquery-ui/</link>
			</item>
			
		
			
			<item>
				<title>Using PostGIS Views for Geoprocessing</title>
				<description>&lt;p&gt;Here&amp;rsquo;s an efficiency improvement I&amp;rsquo;ve recently come up with. I&amp;rsquo;ve been working in QGIS on a hypothetical shuttle routing scenario, and one of the things I&amp;rsquo;ve come up with to improve my efficiency is running my geoprocessing on-the-fly in PostGIS. Rather than run a buffer operation in fTools every time I change the routing (and then load the result to PostGIS), I simply created this view in my PostGIS database for the project:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agency_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route_short_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route_long_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route_desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route_text_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agency_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;potential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;st_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the_geom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the_geom&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now, as I&amp;rsquo;m editing, the buffer around the route automatically updates whenever I save. I had to project to a coordinate system because ST_Buffer uses SRID units for its buffer distance (I used a State Plane Coordinate System, with meters as the units). The query is pretty quick; I use an older P4 2.8GHz with 4GB of RAM as my primary GIS machine, and it calculates in under a second (the table is pretty simple, though). I run my Postgres server and QGIS on the same machine.&lt;/p&gt;
</description>
				<published>Sat Jul 30 18:08:08 -0700 2011</published>
				<link>/2011/07/30/using-postgis-views-for-geoprocessing/</link>
			</item>
			
		
			
			<item>
				<title>Accessing GTFS Data in QGIS</title>
				<description>&lt;p&gt;When you load GTFS data into PostGIS using &lt;a href=&quot;http://code.google.com/p/gtfsdb/&quot;&gt;gtfsdb&lt;/a&gt;, you can&amp;rsquo;t access that data in QGIS because the tables don&amp;rsquo;t have a primary key in int4 format (the primary key is in text format).&lt;/p&gt;

&lt;p&gt;If your transit system uses numeric ids in text format, an easy fix is running this against each of your tables:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLUMN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLUMN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CONSTRAINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops_gid_uniq&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UNIQUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;What this does is creates an integer ID field, populates it with the stop_id (or shape_id, &amp;amp;c.) cast to an integer, then adds NOT NULL and UNIQUE constraints to the column. You can&amp;rsquo;t add the constraints beforehand, because the column is initialized to NULL values. Remember you have to run these commands against every table you want to pull into QGIS directly, and remember to change stop_id to shape_id &amp;amp;c.&lt;/p&gt;

&lt;p&gt;The advantage to this approach is that the gids are the same as the stop_ids. The disadvantage of this approach is that it doesn&amp;rsquo;t work with systems like &lt;a href=&quot;http://bart.gov&quot;&gt;BART&lt;/a&gt; that have alphanumeric stop ids, like &amp;lsquo;SHAY&amp;rsquo; or &amp;lsquo;24TH.&amp;rsquo; If your system has a few ids like &amp;lsquo;3104_A&amp;rsquo;, don&amp;rsquo;t worry that you won&amp;rsquo;t notice them; Postgres won&amp;rsquo;t cast that to a number but will throw an error like:&lt;/p&gt;

&lt;pre&gt;
ERROR:  invalid input syntax for integer: &quot;3104_A&quot;
&lt;/pre&gt;


&lt;p&gt;At least, that&amp;rsquo;s what it did in Postgres 9.0.4.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 2011-11-05:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If your transit system has non-numeric IDs and you can&amp;rsquo;t use the casting trick, you can create numerical IDs that are not tied to the Stop IDs like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLUMN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;SERIAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Thanks, &lt;a href=&quot;http://underdark.wordpress.com&quot;&gt;underdark&lt;/a&gt;!&lt;/p&gt;
</description>
				<published>Mon Jul 25 21:43:37 -0700 2011</published>
				<link>/2011/07/25/accessing-gtfs-data-in-qgis/</link>
			</item>
			
		
			
			<item>
				<title>Transit Appliance at OSCON</title>
				<description>&lt;p&gt;If any of this blog&amp;rsquo;s readers will be attending OSCON July 25-29th in Portland, I suggest you check out the session being led by my codeveloper, &lt;a href=&quot;http://chrissmith.us/&quot;&gt;Chris Smith&lt;/a&gt;, leader and founder of the &lt;a href=&quot;http://transitappliance.org/&quot;&gt;Transit Appliance&lt;/a&gt; project, citizen activist and &lt;a href=&quot;http://portlandtransport.com/&quot;&gt;blogger extraordinaire&lt;/a&gt;. He&amp;rsquo;ll be talking about the open-source roots of the Transit Appliance project, and how the use of open data, hardware and software allows us to create arrival displays that are &amp;ldquo;disruptively low cost.&amp;rdquo; More information is available on the &lt;a href=&quot;http://www.oscon.com/oscon2011/public/schedule/detail/18771&quot;&gt;official page for the talk&lt;/a&gt;.&lt;/p&gt;
</description>
				<published>Mon Jul 11 21:10:59 -0700 2011</published>
				<link>/2011/07/11/transit-appliance-at-oscon/</link>
			</item>
			
		
			
			<item>
				<title>QGIS 1.7 'Wroc&#0322;aw' Released!</title>
				<description>&lt;p&gt;It&amp;rsquo;s official. QGIS 1.7 was released early this morning.&lt;/p&gt;

&lt;p&gt;For the details, see the &lt;a href=&quot;http://qgis.org/component/content/article/127-qgis-1-7-release.html&quot;&gt;full press release&lt;/a&gt;. Note also the new qgis.org banner, which appeared as I was writing this post.&lt;/p&gt;

&lt;p&gt;1.7 is a major new release with a multitude of new features; see the above page for a list.&lt;/p&gt;

&lt;p&gt;Many thanks to the QGIS team for all of their hard work.&lt;/p&gt;
</description>
				<published>Sun Jun 19 22:08:22 -0700 2011</published>
				<link>/2011/06/19/qgis-1-7-wroclaw-released/</link>
			</item>
			
		
			
			<item>
				<title>Archiving Historical Data from NextBus</title>
				<description>&lt;p&gt;It seems that everyone who analyzes historical &lt;a href=&quot;http://nextbus.com&quot;&gt;NextBus&lt;/a&gt; data has a different way of archiving their data. There are lots of ways one can use GIS to analyze this data, from creating movies showing the pulse of the transit system, to analyzing on-time performance, to finding bottlenecks. In that vein, I&amp;rsquo;ve created a short Python script that fetches NextBus data and puts it into a &lt;a href=&quot;http://postgis.org&quot;&gt;PostGIS&lt;/a&gt; database for analysis. You can download the latest version &lt;a href=&quot;http://avl2postgis.googlecode.com/svn/trunk/avl2postgis.py&quot;&gt;here&lt;/a&gt;. Here&amp;rsquo;s a rundown on options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-a, &amp;mdash;agency: the agency. Default sf-muni. This must be the NextBus agency name, e.g. lametro, actransit, mbta.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-t, &amp;mdash;table: the PostGIS table to store the retrieved data in. Default nextbus.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-d, &amp;mdash;dsn: the DSN for your database; documented &lt;a href=&quot;http://initd.org/psycopg/docs/module.html#psycopg2.connect&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-i, &amp;mdash;interval: the interval at which to make requests to the NextBus service. Note that this is &lt;em&gt;not &lt;/em&gt;the resolution of the data; only updated locations are stored, so -i 30 grabs the latest location for every bus that has changed location, every 30 seconds (but see the all-vehicles option, below).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;mdash;all-vehicles: causes positions for all vehicles to be fetched on each request, rather than only updated positions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;mdash;no-deltas: usually, the data is put in with the actual time of the update from the GPS unit to NextBus&amp;rsquo;s server, but this causes the data to be put in with the timestamp of when it was retrieved. Used in conjunction with &amp;mdash;all-vehicles, this provides a &amp;lsquo;snapshot&amp;rsquo; of the transit system every &amp;lt;interval&amp;gt; seconds.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The table should look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;    
      Column   |         Type          |                       Modifiers            
    
    -----------+-----------------------+-------------------------------------------------------
     gid       | integer               | not null default nextval(&amp;#39;nextbus_gid_seq&amp;#39;::regclass)
     agency    | character varying     | not null
     vehicle   | character varying     | not null
     direction | character varying     | not null
     heading   | integer               | not null
     route     | character varying     | not null
     time      | character varying(19) | not null
     the_geom  | geometry              |
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The SRID should be EPSG:4326 (WGS84). As far as I know, all NextBus agencies provide latlong in WGS84 or NAD83 (EPSG:4269), which are close enough to be interchangeable in this case.&lt;/p&gt;

&lt;p&gt;The date field is formatted as YYYY-MM-DD HH:MM:SS, to be compatible with the QGIS &lt;a href=&quot;http://www.geofrogger.net/trac/&quot;&gt;Time Manager&lt;/a&gt; plugin. The issue with the plugin is that buses tend to disappear (when the bus hasn&amp;rsquo;t reported in the given time frame) or multiply (when the bus reported 2+ times).&lt;/p&gt;

&lt;p&gt;For symbology, check out the new symbology implementatation in QGIS. Under Advanced-&amp;gt;Rotation Field, you can choose the &amp;lsquo;heading&amp;rsquo; field to make your icons rotate to the correct orientation.&lt;/p&gt;

&lt;p&gt;The one known issue with the script is that the interval is not respected; the way the interval is implemented is that, after one request has completed, the script sleeps for the interval period. So if requests average 3s, the interval between requests is actually ~33s.&lt;/p&gt;

&lt;p&gt;Adding additional AVL services shouldn&amp;rsquo;t be hard; if you&amp;rsquo;re interested in tackling this, take a look at implementing a function that looks like getDataFromNextBus and drop me a line (contact link under the header); we can add it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve licensed the code under the Apache License, version 2.0.&lt;/p&gt;

&lt;p&gt;The requirements are pretty basic: you need Python, plus the pyquery library and psycopg2 libraries (both can be installed with easy_install).&lt;/p&gt;
</description>
				<published>Sun May 29 19:11:00 -0700 2011</published>
				<link>/2011/05/29/archiving-historical-data-from-nextbus/</link>
			</item>
			
		
			
			<item>
				<title>Changing the Ownership of a WordPress Blog</title>
				<description>&lt;p&gt;Astute readers will have noticed that the author of this blog has just changed. Not to worry, it&amp;rsquo;s just an alter ego! I was doing some housekeeping to keep my various unrelated blogs straight as I move away from my other one. Here&amp;rsquo;s how I did it:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By the way, it may be useful to use two separate browsers so that you can be signed into one WordPress account in each.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new WordPress account for the new blog owner by going to wordpress.com and clicking the orange &amp;lsquo;Get started here&amp;rsquo; button. If you don&amp;rsquo;t want to create a new blog but just a username, click the infinitesimally small &amp;lsquo;Sign up for just a username&amp;rsquo; text under the username field. Fill out the fields (side note: if you only have one email address, and it&amp;rsquo;s a Gmail address, you can trick WordPress.com into thinking you have a new email by adding a period to the address, e.g. if your address is johndoe@gmail.com, put in john.doe@gmail.com. You&amp;rsquo;ll still get the emails at johndoe@gmail.com, but WordPress will think you have two emails.) If you already have the account you want to transfer the blog to, skip this step.&lt;/li&gt;
&lt;li&gt;Click &amp;lsquo;sign up.&amp;rsquo;&lt;/li&gt;
&lt;li&gt;In the original account (user A), go to the blog&amp;rsquo;s dashboard, and choose &amp;lsquo;Add New &amp;ndash;&amp;gt; User&amp;rsquo; from the top bar. Enter the email address of the user you want to transfer the blog to (user B). If you used the period trick, enter the periods. Set &amp;lsquo;Role&amp;rsquo; to &amp;lsquo;Administrator.&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Click the confirmation link in the email that is sent to user B.&lt;/li&gt;
&lt;li&gt;Go to the list of posts as user A. Click the first box to select all posts (I&amp;rsquo;m not sure if this is an issue if you have more posts than fit on one page; comments welcome).&lt;/li&gt;
&lt;li&gt;Under &amp;lsquo;Bulk Actions&amp;rsquo; choose &amp;lsquo;Edit&amp;rsquo;, then click &amp;lsquo;Apply&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;Change author from &amp;emdash;No change&amp;emdash; to the new administrator (this will make the new user the owner of all posts; if you have a multi-author blog, it&amp;rsquo;ll take a little more doing and maybe some SQL trickery in the WordPress DB; as always, comments welcome). Click &amp;lsquo;Apply&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;If the author you are removing made any comments, you&amp;rsquo;ll have to change the ownership manually. I just deleted my old comments and recommented as user B, but this will break threading on many blogs; perhaps there is another way that won&amp;rsquo;t break threads. I had only made one comment anyhow.&lt;/li&gt;
&lt;li&gt;As user A, go to &lt;a href=&quot;https://dashboard.wordpress.com&quot;&gt;https://dashboard.wordpress.com/&lt;/a&gt; and click My Blogs on the left. Hover over the blog you are moving, and choose &amp;lsquo;Transfer Blog.&amp;rsquo; Check the box in the red warning. Enter user B&amp;rsquo;s email (with the periods if applicable).&lt;/li&gt;
&lt;li&gt;Open the confirm link in the email they send to user A. Make sure you do it in a browser where you are signed in as user A, not user B.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re done!&lt;/li&gt;
&lt;/ol&gt;

</description>
				<published>Sun May 29 18:08:03 -0700 2011</published>
				<link>/2011/05/29/changing-the-ownership-of-a-wordpress-blog/</link>
			</item>
			
		
			
			<item>
				<title>Installing QGIS-1.7 on Fedora</title>
				<description>&lt;p&gt;The &lt;a href=&quot;http://www.qgis.org/wiki/Building_QGIS_from_Source#Building_QGIS_with_Qt_4.x&quot;&gt;QGIS instructions&lt;/a&gt; for building from source are targeted at Ubuntu, but they translate fairly well to Fedora. Here&amp;rsquo;s a quick guide:&lt;/p&gt;

&lt;p&gt;Instead of preparing apt as they say, use yum or Package Manager to install these packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cmake&lt;/li&gt;
&lt;li&gt;bison&lt;/li&gt;
&lt;li&gt;flex&lt;/li&gt;
&lt;li&gt;grass-devel&lt;/li&gt;
&lt;li&gt;geos-devel&lt;/li&gt;
&lt;li&gt;PyQt4-devel&lt;/li&gt;
&lt;li&gt;gsl-devel&lt;/li&gt;
&lt;li&gt;qwt-devel&lt;/li&gt;
&lt;li&gt;gdal-devel&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There may be few that I already had installed on my system and missed; if you run configure below and find missing dependencies, run yum search &amp;lt;whatever&amp;gt; in a terminal to look for it. Make sure you install any relevant -devel packages as well.&lt;/p&gt;

&lt;p&gt;Check qgis out of their SVN server into the directory of your choice; I chose qgis-May28 in my software build directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;svn co https://svn.osgeo.org/qgis/trunk/qgis qgis-May28
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cd into that directory and create a directory called build. cd into that.&lt;/p&gt;

&lt;p&gt;QGIS is configured using CMake. Since we&amp;rsquo;re compiling a development version, we want to use a prefix (installation directory) other than the default, for instance ~/qgis-1.7. The .. signifies that the sources are in the directory above the build directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CMAKE_BUILD_PREFIX=~/qgis-1.7 ccmake ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run through the menus, you can probably accept the defaults. Press &amp;lsquo;c&amp;rsquo; to configure QGIS. When that&amp;rsquo;s done, press &amp;lsquo;g&amp;rsquo; to generate the Makefiles. Press &amp;lsquo;q&amp;rsquo; to quit if ccmake doesn&amp;rsquo;t exit automatically.&lt;/p&gt;

&lt;p&gt;Build qgis:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wait a while. When it&amp;rsquo;s done, install qgis with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may need to become root if the directory you chose as a prefix isn&amp;rsquo;t writable by a normal user.&lt;/p&gt;

&lt;p&gt;I used Fedora 13 to write this post.&lt;/p&gt;
</description>
				<published>Sat May 28 21:57:18 -0700 2011</published>
				<link>/2011/05/28/installing-qgis-1-7-on-fedora/</link>
			</item>
			
		
			
			<item>
				<title>1-2-3: Mirror Modelling in Inkscape</title>
				<description>&lt;p&gt;The other day, I needed to draw a symmetrical object (a map point icon) in &lt;a href=&quot;http://inkscape.org&quot;&gt;Inkscape&lt;/a&gt;, the wonderful free vector graphics editor. I was surprised to find that there is no symmetrical modeling feature, so I improvised. Here&amp;rsquo;s how to create a symmetrical polygon in Inkscape:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
Draw half of the object, using the line tool (I know you want a polygon, but draw one side of the object as a line). If you want something that is symmetrical both horizontally and vertically, draw one quarter of the object. I suggest using a guide, so that you can get the ends of the line to be vertically aligned (for vertical symmetry, i.e. left and right) or horizontally aligned (for horizontal symmetry). Get the shape right, because once you create the polygon, the sides will no longer automatically mirror each other.&lt;br/&gt;

&lt;img src=&quot;/a/2011-05-25-1-2-3-mirror-modelling-in-inkscape/mirror1.png&quot; /&gt;

&lt;/li&gt;
&lt;li&gt;
Copy the line you just made and paste (ctrl-alt-v, Paste in Place, may make it easier to line up later, although it will be invisible when first pasted because it will align perfectly with the original path) it into the document. Choose Object-&amp;gt;Flip Horizontal or Object-&amp;gt;Flip Vertical, depending on the axis of symmetry. Move the flipped object so that the ends line up (i.e. it forms a polygon). You can use the arrow keys to align it; holding Alt while using the arrow keys makes them move the object finely. If you are doing two-axis symmetry, create 3 copies and flip one horizontally, one vertically, and one both vertically and horizontally, then line it all up.&lt;br/&gt;

&lt;img src=&quot;/a/2011-05-25-1-2-3-mirror-modelling-in-inkscape/mirror2.png&quot; /&gt;

&lt;/li&gt;
&lt;li&gt;
Use the paint bucket tool to fill the area contained by the lines. This will create a polygon that is symmetrical. You can now either delete the polylines or move them to a hidden layer if you think you'll need them again.&lt;br/&gt;

&lt;img src=&quot;/a/2011-05-25-1-2-3-mirror-modelling-in-inkscape/mirror3.png&quot; /&gt;
&lt;/li&gt;
&lt;/ol&gt;



</description>
				<published>Wed May 25 13:53:47 -0700 2011</published>
				<link>/2011/05/25/1-2-3-mirror-modelling-in-inkscape/</link>
			</item>
			
		
			
			<item>
				<title>Blog to Watch: Under Dark</title>
				<description>&lt;p&gt;If you&amp;rsquo;re interested in Open Source GIS and especially QGIS, I highly suggest you give the blog &amp;ldquo;&lt;a href=&quot;http://underdark.wordpress.com&quot;&gt;Under Dark&lt;/a&gt;&amp;rdquo; a read &amp;ndash; the author seems to be very clued in the latest developments, and the blog is very active.&lt;/p&gt;
</description>
				<published>Thu Apr 21 13:23:23 -0700 2011</published>
				<link>/2011/04/21/blog-to-watch-under-dark/</link>
			</item>
			
		
			
			<item>
				<title>Getting Started with Open-Source GIS: Primer</title>
				<description>&lt;p&gt;I was talking to some friends at school tonight, and I realized what a barrier it can be to actually get some of the open-source geospatial tools I&amp;rsquo;ve talked about on this blog going. So I&amp;rsquo;m going to start a series about how one can get started with these tools, from a level-zero technical knowledge (of course, I assume basic GIS knowledge&amp;emdash;if you know what I mean when I say buffering, geocoding and vector analysis, you&amp;rsquo;re fine). I&amp;rsquo;ll be approaching it from the standpoint of a Windows user (although OS X users with Intel Macs should be able to follow the same instructions, and if you&amp;rsquo;re a Linux user, you should have no problem).&lt;/p&gt;

&lt;p&gt;This is the first post in the series &amp;ldquo;&lt;a href=&quot;/category/getting-started-with-open-source-gis/&quot;&gt;Getting Started with Open Source GIS&lt;/a&gt;.&amp;rdquo; Hopefully, by the time the series is over, you&amp;rsquo;ll have a good understanding of how to use open source tools to complement or replace the tools you use now. I think open source GIS can especially be a boon to organizations that can&amp;rsquo;t afford (or can&amp;rsquo;t justify) a proprietary GIS solution at all.&lt;/p&gt;

&lt;p&gt;Note: to follow these instructions, you&amp;rsquo;ll need to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lots of disk space &amp;ndash; at least 12GB available, preferably 20-30GB (it&amp;rsquo;s OK if it&amp;rsquo;s on an external hard drive as long as the drive is reasonably fast).&lt;/li&gt;
&lt;li&gt;Lots of RAM &amp;ndash; at least 1GB (more if you&amp;rsquo;re running a recent version of Windows, e.g. 7 or Vista). If you have 2GB+ you should be fine. RAM is also not that expensive, and it speeds up computers tremendously.&lt;/li&gt;
&lt;li&gt;If your system doesn&amp;rsquo;t meet these requirements, you can get a live DVD or a USB drive from OSGeo Live (link below), then run it from that with 512MB of RAM and no disk space required.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Fortunately for us, our own &lt;a href=&quot;http://osgeo.org&quot;&gt;Open Source Geospatial Foundation&lt;/a&gt; packages almost all of the tools, together with a variant of the Xubuntu Linux operating system, in one file, that we can install easily into a virtual machine (If you don&amp;rsquo;t know what a virtual machine is, check &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_Machine&quot;&gt;Wikipedia&lt;/a&gt;). All of the software I&amp;rsquo;ll be using in this series is open source, so of course I&amp;rsquo;m using an open source virtual machine platform: &lt;a href=&quot;http://virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;. Download and install the latest version (4.0.4 at this writing). This will differ depending on your platform, so I won&amp;rsquo;t provide instructions here; their website has some instructions, and Google is always there. Once you have VirtualBox installed, come back here (you don&amp;rsquo;t need to set up a virtual machine yet).&lt;/p&gt;

&lt;p&gt;Now, we need to download the virtual machine file from &lt;a href=&quot;http://live.osgeo.org&quot;&gt;OSGeo Live&lt;/a&gt;. Click on the &amp;lsquo;Download&amp;rsquo; link, then choose &amp;lsquo;osgeo-live-vm-&amp;lt;version&amp;gt;.iso&amp;rsquo; (I used version 4.5, if you use a later version, your graphics may differ slightly but these instructions should still apply). Wait a long time while it downloads&amp;emdash;this is probably the biggest file most people will ever download (side note: if you get your internet via 3G, ham radio or passenger pigeon, which are &lt;em&gt;all&lt;/em&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Packet_radio#Amateur_Packet_Radio_and_the_AMPRNet&quot;&gt;accepted internet&lt;/a&gt;&lt;a href=&quot;http://www.rfc-editor.org/rfc/rfc1149.txt&quot;&gt; routing protocols&lt;/a&gt;, there may be a maximum amount you can download each month before they hit you with charge or cut off your connection; be careful and try to borrow someone else&amp;rsquo;s high-speed connection).&lt;/p&gt;

&lt;p&gt;Next, we need to unpack the file. Windows users should install &lt;a href=&quot;http://www.7-zip.org/&quot;&gt;7-Zip&lt;/a&gt;. Mac users should look at &lt;a href=&quot;http://www.kekaosx.com/en/&quot;&gt;Keka&lt;/a&gt; (note: I haven&amp;rsquo;t used Keka, but a quick Google search indicates that it has pretty good reviews). Linux users: look for p7zip in your distribution&amp;rsquo;s package manager. Once you&amp;rsquo;ve unpacked the file (and know where the unarchived .vmdk file is), come back here.&lt;/p&gt;

&lt;p&gt;Open up VirtualBox. Click &amp;lsquo;New&amp;rsquo;. In the window that appears, give the machine a name, and select Operating System &amp;ndash;&amp;gt; Linux, Version &amp;ndash;&amp;gt; Ubuntu. Click &amp;lsquo;Next&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/a/2011-04-19-getting-started-with-open-source-gis-primer/new.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the next screen, you will configure the amount of your RAM this virtual machine has dedicated to it. OSGeo Live requires at least 512MB, I suggest more &amp;ndash; I suggest dragging the slider to the top of the green. (note to power users: I&amp;rsquo;ve had success running VMs in the orange if I&amp;rsquo;m not doing much else with the system. You can&amp;rsquo;t boot a VM in the red). Click &amp;lsquo;Next&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/a/2011-04-19-getting-started-with-open-source-gis-primer/mem.png&quot; alt=&quot;&quot; /&gt;]&lt;/p&gt;

&lt;p&gt;On the &amp;lsquo;Virtual Hard Disk&amp;rsquo; screen, deselect &amp;lsquo;Create new hard disk&amp;rsquo; by clicking on &amp;lsquo;Use existing hard disk.&amp;rsquo; Press the &amp;lsquo;browse&amp;rsquo; button (folder with arrow to right of menu) and select the .vmdk file you extracted (not the .vmx!). Click &amp;lsquo;Next&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/a/2011-04-19-getting-started-with-open-source-gis-primer/disk.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Review the settings and click &amp;lsquo;Finish&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;There are a few more tweaks we want to make to our configuration to make the GIS software run better. In the left pane of the main VirtualBox window, select the machine you created, then click &amp;lsquo;Settings&amp;rsquo;. Choose &amp;lsquo;Display&amp;rsquo; on the left side, and drag video memory to it&amp;rsquo;s maximum. Also check &amp;lsquo;Enable 3D Acceleration&amp;rsquo;, if it&amp;rsquo;s not gray.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/a/2011-04-19-getting-started-with-open-source-gis-primer/disp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the main VirtualBox window, select your machine and click &amp;lsquo;Start&amp;rsquo; (note: I have about 12 virtual machines on my computer &amp;ndash; you probably only have one.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/a/2011-04-19-getting-started-with-open-source-gis-primer/start2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wait a while while the machine starts up. It will eventually go to an &amp;lsquo;Automatic Login&amp;rsquo; screen &amp;ndash; just wait until it logs in automatically. Eventually, you&amp;rsquo;ll see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/a/2011-04-19-getting-started-with-open-source-gis-primer/osgeo-desktop.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;re a few more things we need to do. Click Applications &amp;ndash;&amp;gt; Ubuntu Software Center, and search for &amp;lsquo;virtualbox-ose-guest&amp;rsquo;; install the packages &amp;lsquo;virtualbox-ose-guest-x11&amp;rsquo; and &amp;lsquo;virtualbox-ose-guest-utils&amp;rsquo; (the names are below the bold headings). When it asks for a password, enter &amp;lsquo;user&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/a/2011-04-19-getting-started-with-open-source-gis-primer/guest.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When both installs are complete (i.e., the green &amp;lsquo;in progress&amp;rsquo; icon in the left panel goes away), reboot the virtual machine with Applications &amp;ndash;&amp;gt; Log Out. Click &amp;lsquo;Restart&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t able to get shared folders working with the OSGeo install&amp;emdash;I&amp;rsquo;ll look into that later. For now, I recommend a service like &lt;a href=&quot;http://dropbox.com&quot;&gt;Dropbox&lt;/a&gt; to sync files between your physical and virtual machines.&lt;/p&gt;

&lt;p&gt;Look at all of the programs under the &amp;lsquo;Geospatial&amp;rsquo; menu! Have fun! (and I&amp;rsquo;ll post some tutorials here soon). You might want to look at &lt;a href=&quot;http://cameronshorter.blogspot.com/2010/09/osgeolive-40-lightening-overview.html&quot;&gt;this overview video&lt;/a&gt; of the applications provided.&lt;/p&gt;
</description>
				<published>Tue Apr 19 11:09:47 -0700 2011</published>
				<link>/Getting Started with Open Source GIS/2011/04/19/getting-started-with-open-source-gis-primer/</link>
			</item>
			
		
			
			<item>
				<title>Basemaps in QGIS</title>
				<description>&lt;p&gt;&lt;strong&gt;Update 2012-02-02 17:57 -0800:&lt;/strong&gt;I just wrote a post about &lt;a href=&quot;/2012/02/02/more-basemaps-in-qgis/&quot;&gt;another way to do this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I really like &lt;a href=&quot;http://qgis.org&quot;&gt;QGIS&lt;/a&gt;. It&amp;rsquo;s a powerful GIS that runs on Linux (among other operating systems) and doesn&amp;rsquo;t require incredible amounts of CPU. One criticism I had of it was that it did not provide the same &amp;lsquo;click-and-go&amp;rsquo; basemap experience one can get with ArcGIS for making simple maps (i.e. Add Basemap, select Bing, DeLorme, &amp;amp;c. and you&amp;rsquo;re done). No more! Thanks to the &lt;a href=&quot;https://github.com/pka/qgis-openlayers-plugin/&quot;&gt;qgis-openlayers&lt;/a&gt; plugin available on GitHub, you can now use OSM, Google Maps, Yahoo Maps and Bing Maps as base layers in your project (side note: make sure you don&amp;rsquo;t violate any copyrights by using them). &lt;del&gt;I&amp;rsquo;ve had a little trouble with the projections, but I&amp;rsquo;m not that good with dynamic reprojection in QGIS yet, so I&amp;rsquo;m sure it&amp;rsquo;s my error.&lt;/del&gt;; Unfortunately, the layers don&amp;rsquo;t support reprojection, so your project is basically forced to use Google Mercator&amp;emdash;which may be a showstopper but is often acceptable for quick maps (remember, QGIS can reproject your other layers). If you do want reprojection, see &lt;a href=&quot;/2012/02/02/more-basemaps-in-qgis/&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s pretty clever how the library works&amp;emdash;it basically just renders an OpenLayers web page into the frame. It&amp;rsquo;s raster and doesn&amp;rsquo;t support an alpha channel, so this is pretty much just good for basemaps. If you have another OpenLayers basemap you&amp;rsquo;d like to use, implementing it is pretty simple&amp;emdash;but that&amp;rsquo;s a topic for another time.&lt;/p&gt;

&lt;p&gt;Installation is simple in recent versions of QGIS&amp;emdash;just go to Plugins &amp;ndash;&amp;gt; Fetch Python Plugins&amp;hellip;, click &amp;lsquo;Add 3rd Party Repositories&amp;rsquo; in the repositories tab, and search for and install &amp;lsquo;OpenLayers Plugin&amp;rsquo; in the &amp;lsquo;Plugins&amp;rsquo; tab. Restart QGIS, and find your new menu under Plugins &amp;ndash;&amp;gt; OpenLayers Plugin. Cool!&lt;/p&gt;
</description>
				<published>Wed Apr 06 16:36:02 -0700 2011</published>
				<link>/2011/04/06/basemaps-in-qgis/</link>
			</item>
			
		
			
			<item>
				<title>Plug: Google Fusion Tables</title>
				<description>&lt;p&gt;Google Fusion Tables is a fairly new service many may not have heard of: it lets you manage large tabular datasets in the cloud, using Google&amp;rsquo;s infrastructure. You can then visualize that data in a variety of ways, including a Google Map. The coolest feature in my mind is the ability to geocode addresses to a map on the fly. There are lots of datasets out there that, rather than providing a mappable latitude and longitude, provide an address column (or street, city, state, &amp;amp;c., which is easily turned into an address column using the concatenate function of your favorite spreadsheet)&amp;emdash;many of the datasets on &lt;a href=&quot;http://datasf.org&quot;&gt;DataSF&lt;/a&gt; are like this, as are many others.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s Google Research&amp;rsquo;s official announcement: &lt;a href=&quot;http://googleresearch.blogspot.com/2009/06/google-fusion-tables.html&quot;&gt;http://googleresearch.blogspot.com/2009/06/google-fusion-tables.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the product itself: &lt;a href=&quot;http://www.google.com/fusiontables/Home&quot;&gt;http://www.google.com/fusiontables/Home&lt;/a&gt;&lt;/p&gt;
</description>
				<published>Sat Apr 02 05:26:29 -0700 2011</published>
				<link>/2011/04/02/plug-google-fusion-tables/</link>
			</item>
			
		
			
			<item>
				<title>Agencies Providing Real-Time Data</title>
				<description>&lt;p&gt;&lt;span class=&quot;warn-bar&quot;&gt;
Note 2012-06-15: this page is now quite outdated.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As a part of the &lt;a href=&quot;http://transitappliance.org&quot;&gt;Transit Appliance Project&lt;/a&gt;, I&amp;rsquo;ve been evaluating what transit agencies have real-time data; here&amp;rsquo;s a (non-exhaustive) list, focused primarily on U.S. agencies (note: these are only agencies that provide an API, not any agency with a real-time feed):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://trimet.org&quot;&gt;TriMet,&lt;/a&gt; Portland, OR, custom JSON[-P] feed, XML may also be available. GTFS-realtime is also available.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sfmta.org&quot;&gt;San Francisco Muni&lt;/a&gt;, via &lt;a href=&quot;http://nextbus.com&quot;&gt;NextBus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bart.gov&quot;&gt;Bay Area Rapid Transit (BART)&lt;/a&gt;, San Francisco, CA, custom XML feed. Their &lt;a href=&quot;http://groups.google.com/group/bart-developers&quot;&gt;Google Group&lt;/a&gt; is very responsive and helpful. GTFS-realtime is also available.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://actransit.org&quot;&gt;AC Transit&lt;/a&gt;, Oakland, CA, via &lt;a href=&quot;http://nextbus.com&quot;&gt;NextBus&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://metro.net&quot;&gt;Los Angeles Metro&lt;/a&gt;, both via &lt;a href=&quot;http://nextbus.com&quot;&gt;NextBus&lt;/a&gt; and a custom XML API.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://unitrans.ucdavis.edu&quot;&gt;Unitrans&lt;/a&gt;, Davis, CA, via &lt;a href=&quot;http://nextbus.com&quot;&gt;NextBus&lt;/a&gt;. Their GTFS is hosted by Sacramento RT.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mbta.com&quot;&gt;MBTA&lt;/a&gt;, via &lt;a href=&quot;http://nextbus.com&quot;&gt;NextBus&lt;/a&gt;. They have a GTFS at &lt;a href=&quot;http://www.eot.state.ma.us/developers/&quot;&gt;http://www.eot.state.ma.us/developers/&lt;/a&gt; that has stop ids to match NextBus. They have a trial up for rail arrivals.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tfl.gov.uk&quot;&gt;Transport for London (TfL)&lt;/a&gt;, custom XML API.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wmata.com&quot;&gt;Washington Metropolitan Area Transit Authority (WMATA)&lt;/a&gt;, custom XML/JSON[-P] API; has real time arrivals for rail, but only positions for buses (no arrivals).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dccirculator.com&quot;&gt;DC Circulator&lt;/a&gt;, via &lt;a href=&quot;http://nextbus.com&quot;&gt;NextBus&lt;/a&gt;. I couldn&amp;rsquo;t find any public GTFS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://transitchicago.com&quot;&gt;Chicago CTA&lt;/a&gt;, custom XML API for buses, no arrival data for trains yet.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I know that there are a ton that aren&amp;rsquo;t on here; as I do more research, I&amp;rsquo;ll put more up.&lt;/p&gt;
</description>
				<published>Sat Apr 02 00:14:40 -0700 2011</published>
				<link>/2011/04/02/agencies-providing-real-time-data/</link>
			</item>
			
		
	</channel>
</rss>